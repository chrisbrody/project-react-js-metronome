{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","Doc.js","index.js"],"names":["module","exports","Metronome","props","beatsPerMeasure","event","target","value","setState","startStop","state","playing","clearInterval","timer","setInterval","playClick","bpm","count","click2","play","click1","handleBpmChange","Audio","this","className","type","min","max","onChange","onClick","Component","Doc","document","title","React","ReactDOM","render","getElementById"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wLCgH5BC,E,YAzGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,gBAAkB,SAAAC,GAChB,IAAMD,EAAkBC,EAAMC,OAAOC,MAErC,EAAKC,SAAS,CAAEJ,qBAnBC,EAsBnBK,UAAY,WACP,EAAKC,MAAMC,SAEZC,cAAc,EAAKC,OACnB,EAAKL,SAAS,CACZG,SAAS,MAIX,EAAKE,MAAQC,YACX,EAAKC,UAAY,GAAK,EAAKL,MAAMM,IAAO,KAE1C,EAAKR,SACH,CACES,MAAO,EACPN,SAAS,GAGX,EAAKI,aAxCQ,EA6CnBA,UAAY,WAAO,IAAD,EACmB,EAAKL,MADxB,EACRO,MADQ,EACDb,kBAGgB,EAC7B,EAAKc,OAAOC,OAEZ,EAAKC,OAAOD,OAId,EAAKX,UAAS,SAAAE,GAAK,MAAK,CACtBO,OAAQP,EAAMO,MAAO,GAAKP,EAAMN,qBAzDjB,EA6DnBiB,gBAAkB,SAAAhB,GAChB,IAAMW,EAAMX,EAAMC,OAAOC,MAEtB,EAAKG,MAAMC,SAEZC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAY,GAAKC,EAAO,KAGtD,EAAKR,SAAS,CAAES,MAAM,EAAGD,SAGzB,EAAKR,SAAS,CAAEQ,SArElB,EAAKN,MAAQ,CACXC,SAAS,EACTM,MAAO,EACPD,IAAK,IACLZ,gBAAiB,GAInB,EAAKgB,OAAS,IAAIE,MAAMF,KACxB,EAAKF,OAAS,IAAII,MAAMJ,KAbP,E,sEA6EV,MAEkBK,KAAKb,MAAtBC,EAFD,EAECA,QAASK,EAFV,EAEUA,IAGjB,OACE,yBAAKQ,UAAU,aACb,yBAAKA,UAAU,cACb,0DACA,6BAAMR,EAAN,QACA,2BACES,KAAK,QACLC,IAAI,KACJC,IAAI,MACJpB,MAAOS,EACPY,SAAUL,KAAKF,mBAEnB,4BAAQQ,QAASN,KAAKd,WAAYE,EAAU,OAAS,SACrD,uDACA,4BAAQkB,QAASN,KAAKnB,gBAAiBG,MAAM,IAAIiB,UAAU,SAA3D,KACA,4BAAQK,QAASN,KAAKnB,gBAAiBG,MAAM,IAAIiB,UAAU,gBAA3D,KACA,4BAAQK,QAASN,KAAKnB,gBAAiBG,MAAM,IAAIiB,UAAU,SAA3D,KACA,4BAAQK,QAASN,KAAKnB,gBAAiBG,MAAM,IAAIiB,UAAU,SAA3D,U,GApGgBM,aCFlBC,E,4LAEFC,SAASC,MAAQ,+B,+BAIjB,OAAQ,M,GANMC,IAAMJ,WAUxBK,IAASC,OAAO,kBAAC,EAAD,MAASJ,SAASK,eAAe,SCLjDF,IAASC,OAAO,kBAAC,EAAD,MAAeJ,SAASK,eAAe,W","file":"static/js/main.62cde7dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    // set the state of Metronome\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n\n    // Create Audio objects with the files Webpack loaded, and we'll play them later.\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n  }\n\n  beatsPerMeasure = event => {\n    const beatsPerMeasure = event.target.value;\n\n    this.setState({ beatsPerMeasure });\n  }\n\n  startStop = () => {\n    if(this.state.playing) {\n      // stop the timer\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    } else {\n      // start the timer with the current BPM\n      this.timer = setInterval(\n        this.playClick, (60 / this.state.bpm) * 1000\n      );\n      this.setState(\n        {\n          count: 0,\n          playing: true\n          // Play a click \"immediately\" (after setState finishes)\n        },\n        this.playClick\n      );\n    }\n  }\n\n  playClick = () => {\n    const { count, beatsPerMeasure } = this.state;\n\n    // The first beat will have a different sound than the others\n    if(count % beatsPerMeasure === 0) {\n      this.click2.play();\n    } else {\n      this.click1.play();\n    }\n\n    // Keep track of which beat we're on\n    this.setState(state => ({\n      count: (state.count +1) % state.beatsPerMeasure\n    }));\n  }\n\n  handleBpmChange = event => {\n    const bpm = event.target.value;\n\n    if(this.state.playing) {\n      // Stop the old timer and start a new one\n      clearInterval(this.timer);\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n      // Set the new BPM, and reset the beat counter\n      this.setState({ count:0, bpm });\n    } else {\n      // Otherwise just update the BPM\n      this.setState({ bpm });\n    }\n  }\n\n  render() {\n    // variables for beats per minute and if the player is going for not\n    const { playing, bpm } = this.state;\n\n    // display HTML for beats for minute slider\n    return (\n      <div className=\"metronome\">\n        <div className=\"bpm-slider\">\n          <h1>React Adjustable Metronome</h1>\n          <div>{bpm} BPM</div>\n          <input \n            type=\"range\" \n            min=\"60\" \n            max=\"240\" \n            value={bpm} \n            onChange={this.handleBpmChange} />\n        </div>\n        <button onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n        <p>change beats per measure</p>\n        <button onClick={this.beatsPerMeasure} value=\"2\" className=\"beats\">2</button>\n        <button onClick={this.beatsPerMeasure} value=\"4\" className=\"beats active\">4</button>\n        <button onClick={this.beatsPerMeasure} value=\"6\" className=\"beats\">6</button>\n        <button onClick={this.beatsPerMeasure} value=\"8\" className=\"beats\">8</button>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;","import React from 'react';\nimport ReactDOM from 'react-dom'\n\n\nclass Doc extends React.Component{\n  componentDidMount(){\n    document.title = \"React Adjustable Metronome\"\n  }\n\n  render(){\n    return( true );\n  }\n}\n\nReactDOM.render(<Doc />, document.getElementById('root'));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Metronome from './Metronome';\nimport Doc from './Doc';\nimport './Metronome.css';\n\n\n\n\nReactDOM.render(<Metronome />, document.getElementById('root'));"],"sourceRoot":""}